

(function () {
  'use strict';

 angular.module('iui.alerts', []);

})();
/*doc
---
title: iui-alert-placeholder
name: iui-alert-placeholder
category: directives
---
Directive that creates a placeholder area for alerts generated by `iuiAlertService`.

The id is used as the unique identifier for the iuiAlertService.
Always prefix the id with `alert_` like `alert_wizardStep`
This prefix allows us to easily identify alerts in the codebase

Alerts with `type: warning` (red color) should never have a timeout.

```html_example
<iui-alert-placeholder id="alert_exampleArea"></iui-alert-placeholder>
<div ng-controller="AlertController as alertMain">
  <button 
    class="btn btn-default" 
    ng-click="alertMain.iuiAlertService.add('alert_exampleArea', { type: 'info', activeFor: 4000, canClose: true, message: 'Ah, it\'s the old... trick.'})">
    Trigger Example Area Alert (4 second timeout)
  </button>
  <button 
    class="btn btn-default" 
    ng-click="alertMain.iuiAlertService.add('alert_appTop', { type: 'danger', message: 'Pardon me while I get my shoe phone.'})">
    Trigger App Top Alert
  </button>
  <button 
    class="btn btn-default" 
    ng-click="alertMain.iuiAlertService.add('alert_appTop', { type: 'success', canClose: true, message: 'Pardon me while I get my shoe phone.', templateUrl: '/custom-template-url.html'})">
    Trigger App Top Custom Template Alert Success
  </button>
  <button 
    class="btn btn-default" 
    ng-click="alertMain.iuiAlertService.clear('alert_exampleArea')">
    Hide Example Area Alert
  </button>
  <button 
    class="btn btn-default" 
    ng-click="alertMain.iuiAlertService.clearAll()">
    Hide ALL Alerts
  </button>
</div>
```

```js_example
app.run(['$templateCache', function($templateCache) {
  $templateCache.put('/custom-template-url.html', '{{alertPlaceholder.alerts.alert.message}} <a href="">View the Shoe Phone</a> ');
}]);
app.controller('AlertController', ['iuiAlertService', function(iuiAlertService) {
  this.iuiAlertService = iuiAlertService;
}]);
```
*/

/* directive for displaying alerts in a specific area */

(function () {
  'use strict';

  angular.module('iui.alerts')
         .directive('iuiAlertPlaceholder', iuiAlertPlaceholder);

  function iuiAlertPlaceholder() {
    var directive = {
      restrict: 'E',
      scope: {},
      templateUrl: '/$iui-alerts/alerts/iui-alert-placeholder.html',
      controller: AlertPlaceholderController,
      controllerAs: 'alertPlaceholder',
      link: link
    };
    return directive;

    function link(scope, element, attrs, controller) {
      controller.activate(attrs.id);
    }
  }

  AlertPlaceholderController.$inject = ['iuiAlertService', 'iuiAlertLabels'];

  function AlertPlaceholderController(iuiAlertService, iuiAlertLabels) {
    var vm = this;
    
    vm.labels = iuiAlertLabels;
    vm.activate = activate;

    function activate(placeholderId) {
      vm.alerts = iuiAlertService.getCurrent(placeholderId);
      vm.closeAlert = closeAlert;

      function closeAlert() {
        return iuiAlertService.closeAlert(placeholderId);
      }
    }
  }

})();

(function () {
  'use strict';

  angular.module('iui.alerts')
  .factory('iuiAlertService', ['$timeout', 'iuiAlertsConfig', function (timeout, iuiAlertsConfig) {
    var placements = {},
      callback = '';

    return {

      getCurrent: function (id) {
        if (!placements[id]) {
           placements[id] = {};
        }
        return placements[id || iuiAlertsConfig.defaultPlacement] || {};
      },

      /* add alert */
      add: function (placement, alertObject) {

        var activeFor = alertObject.activeFor || 0;
        
        placement = placement || iuiAlertsConfig.defaultPlacement;
        var currentPlacement = placements[placement];
        if(!currentPlacement){
          currentPlacement = placements[placement] = {};
        }

        // if the message is an error, it does not need a timeout
        if (alertObject.type === 'danger') {
          activeFor = 0;
        }

        currentPlacement.callback = alertObject.callback;

        var defaults = {
          templateUrl: iuiAlertsConfig.defaultAlertTemplate
        };

        var overrides = {
          activeFor: activeFor,
          placement: placement
        };

        currentPlacement.alert = _.extend({}, defaults, alertObject, overrides);

        if (currentPlacement.promise) {
          timeout.cancel(currentPlacement.promise);
        }

        if (activeFor === 0) {
          return;
        }

        currentPlacement.promise = timeout(function () {
          currentPlacement.alert = {};
          if (currentPlacement.callback) {
            currentPlacement.callback();
          }
        }, (activeFor !== undefined) ? activeFor : iuiAlertsConfig.defaultTimeOut);

      },

      /* close alert */
      closeAlert: function (id) {
        var placement = this.getCurrent(id);
        placement.alert = {};
        timeout.cancel(placement.promise);
        if (placement.callback){
          placement.callback();
        }
      },

      clearAll: function () {
        _.each(placements, function(placement) {
          placement.alert = {};
          timeout.cancel(placement.promise);
        });
      },

      /* clear alert */
      clear: function (id) {
        if (id) {
          var current = this.getCurrent(id);
          if(!current){
            return;
          }
          current.alert = {};
          timeout.cancel(current.promise);
        } else {
          this.clearAll();
        }
        
      }

    };

  }]);

})();
(function () {
  'use strict';

  angular.module('iui.alerts')
    .value('iuiAlertLabels', {
      close: 'Close'
    })
    .constant('iuiAlertsConfig', {
      defaultAlertTemplate: '/$iui-alerts/alerts/iui-default-alert.html',
      defaultTimeOut: 20000,
      defaultPlacement: 'alert_appTop'
    });

})();
/*doc
---
title: to_trusted
name: to_trusted
category: filters
---

Filter to "trust" the HTML source. This is useful for binding HTML from the API. 
Please use caution when using this filter. If you find yourself storing bits and 
pieces of HTML in a service or controller, consider using an `ng-include` or a `directive` instead.

```html_example
<div ng-controller="ToTrustedController as example">
  <span ng-bind-html="example.quote | to_trusted"></span>
</div>
```

```js_example
app.controller('ToTrustedController', [function() {
  // This is strictly an example. Please do not store HTML in Javascript files
  this.quote = '<blockquote><em>Good thinking, Max.</em> &mdash; <strong>Agent 99</strong></blockquote>';
}]);
```
*/


// This filter allows you to use ng-bind-html when html is coming from the API
(function () {
  'use strict';

  angular.module('iui.alerts').filter('to_trusted', ['$sce', function($sce){
    return function(text) {
      return $sce.trustAsHtml(text);
    };
  }]);

}());
(function(module) {
try {
  module = angular.module('iui.alerts');
} catch (e) {
  module = angular.module('iui.alerts', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/$iui-alerts/alerts/iui-alert-placeholder.html',
    '<div \n' +
    '  ng-if="alertPlaceholder.alerts.alert.message" \n' +
    '  class="alert-wrapper">\n' +
    '  <div \n' +
    '    class="alert alert-{{alertPlaceholder.alerts.alert.type}}" \n' +
    '    ng-class="{\'alert-dismissible\': alertPlaceholder.alerts.alert.canClose}"\n' +
    '    role="alert">\n' +
    '    <button \n' +
    '      ng-if="alertPlaceholder.alerts.alert.canClose"\n' +
    '      type="button" \n' +
    '      class="close" \n' +
    '      aria-label="{{alertPlaceholder.labels.close}}" \n' +
    '      ng-click="alertPlaceholder.closeAlert()">\n' +
    '      <span aria-hidden="true">&times;</span>\n' +
    '    </button>\n' +
    '    <div\n' +
    '      class="alert-message"\n' +
    '      ng-include="alertPlaceholder.alerts.alert.templateUrl"></div>\n' +
    '  </div>\n' +
    '</div>');
}]);
})();

(function(module) {
try {
  module = angular.module('iui.alerts');
} catch (e) {
  module = angular.module('iui.alerts', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/$iui-alerts/alerts/iui-default-alert.html',
    '<div ng-bind-html="alertPlaceholder.alerts.alert.message | to_trusted"></div>');
}]);
})();
